CREATE DATABASE VEHICLE_THEFT;
USE VEHICLE_THEFT;

-- CREATING TABLE

--TABLE = MAKE_DETAILS
CREATE TABLE MAKE_DETAILS
(
MAKE_ID VARCHAR(MAX),
MAKE_NAME VARCHAR(MAX),
MAKE_TYPE VARCHAR(MAX)
);


--TABLE = LOCATIONS
CREATE TABLE LOCATION
(
LOCATION_ID VARCHAR(MAX),
REGION VARCHAR(MAX),
COUNTRY VARCHAR(MAX),
POPULATION_OF_REGION VARCHAR(MAX),
DENSITY VARCHAR(MAX)
);

-- TABLE = STOLEN_VEHICLES
CREATE TABLE STOLEN_VEHICLES
(
VEHIVLE_ID VARCHAR(MAX),
VEHICLE_TYPE VARCHAR (MAX),
MAKE_ID VARCHAR(MAX),
MODEL_YEAR VARCHAR(MAX),
VEH_DESC VARCHAR (MAX),
COLOR VARCHAR(MAX),
DATE_STOLEN VARCHAR(MAX),
LOCATION_ID VARCHAR(MAX)
);

BULK INSERT STOLEN_VEHICLES
FROM 'E:\SQL Projects\SQL projects by Sagar - 29th Feb & 1st March\stolen_vehicles.csv'
WITH (FIELDTERMINATOR = ',' , ROWTERMINATOR = '\n', FIRSTROW = 2);

BULK INSERT LOCATION
FROM 'E:\SQL Projects\SQL projects by Sagar - 29th Feb & 1st March\locations.csv'
WITH (FIELDTERMINATOR = ',' , ROWTERMINATOR = '\n', FIRSTROW = 2);

BULK INSERT MAKE_DETAILS
FROM 'E:\SQL Projects\SQL projects by Sagar - 29th Feb & 1st March\make_details.csv'
WITH (FIELDTERMINATOR = ',' , ROWTERMINATOR = '\n', FIRSTROW = 2);

SELECT * FROM MAKE_DETAILS;
SELECT * FROM LOCATION;
SELECT * FROM STOLEN_VEHICLES;

-- LET'S CHECK THE DATATYPE OF ALL TABLES

SELECT COLUMN_NAME, DATA_TYPE FROM
INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'STOLEN_VEHICLES';
SELECT * FROM STOLEN_VEHICLES;

SELECT COLUMN_NAME, DATA_TYPE FROM
INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'LOCATION';
SELECT * FROM LOCATION;


SELECT COLUMN_NAME, DATA_TYPE FROM
INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'MAKE_DETAILS';
SELECT * FROM MAKE_DETAILS;


-- CREATE THE DATA TYPE CONSISTENCY PLAN
-- FOR STOLEN_VEHICLES DATE_STOLEN = DATE, VID,MAKE_ID, MODEL_YEAR, LOCATION_ID = NUM
-- FOR LOCATION DENSITY = DECIMAL, LOCATION_ID, POPULATION = NUM
-- FOR MAKE_DETAILS MAKE_ID = NUM

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN MAKE_ID INT;


ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN VEHIVLE_ID INT;

-- IT'S NOT WORKING SO THEIR SHOULD BR NON NUMERIC VALUE
SELECT * FROM STOLEN_VEHICLES
WHERE ISNUMERIC(MAKE_ID) = 0;

--LET'S CHANGE NON-NUMERIC VALUE TO NUMERIC
UPDATE STOLEN_VEHICLES SET MAKE_ID = 623
WHERE MAKE_ID LIKE '%623%';

SELECT* FROM STOLEN_VEHICLES
WHERE MAKE_ID LIKE '%623-11%';

UPDATE STOLEN_VEHICLES SET MAKE_ID = 543
WHERE MAKE_ID LIKE '%543%'; 

UPDATE STOLEN_VEHICLES SET MAKE_ID = 505
WHERE MAKE_ID LIKE '%505%'; 

UPDATE STOLEN_VEHICLES SET MAKE_ID = 503
WHERE MAKE_ID LIKE '%503%'; 

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN MAKE_ID INT;

-- MODEL YEAR IN VEHICLE_STOLEN
ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN MODEL_YEAR INT;

--DATA STOLEN COLUMN

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN DATE_STOLEN DATE;

-- THIS IS NOT WORKING SO THEIR MUST BE NON DATE VALUE
SELECT * FROM STOLEN_VEHICLES
WHERE ISDATE(DATE_STOLEN) = 0;

-- UPDATE NON-DATE VALUES YO DATE VALUES(AS IT COULD BE N NUMBERS)

UPDATE STOLEN_VEHICLES SET DATE_STOLEN = CASE
WHEN ISDATE(DATE_STOLEN) = 0 THEN
CONVERT(VARCHAR(50), GETDATE()/*2024-02-24*/,120)

ELSE DATE_STOLEN END;

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN DATE_STOLEN DATE;

SELECT* FROM STOLEN_VEHICLES;

ALTER TABLE STOLEN_VEHICLES
ALTER COLUMN LOCATION_ID INT;

-- LET'S AGAIN CHECK DATA-TYPE FOR TABLE STOLEN_VEHICLES
SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'STOLEN_VEHICLES';

--LET'S DO NEXT TABLE LOCATION
SELECT * FROM LOCATION;

ALTER TABLE LOCATION
ALTER COLUMN LOCATION_ID INT;

ALTER TABLE LOCATION
ALTER COLUMN POPULATION_OF_REGION INT;

ALTER TABLE LOCATION
ALTER COLUMN DENSITY DECIMAL(10,2);

SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'LOCATION';

SELECT * FROM LOCATION;

-- MAKE_DETAILS

SELECT * FROM MAKE_DETAILS;

SELECT COLUMN_NAME, DATA_TYPE
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'MAKE_DETAILS';

ALTER TABLE MAKE_DETAILS
ALTER COLUMN MAKE_ID INT;

-- CONVERSION FAILED B/C OF SOME NON-DUGUT NUMBER
-- LET'S FIND OUT WHAT IS NON DIGIT NUMBER IS PRESENT

SELECT * FROM MAKE_DETAILS
WHERE ISNUMERIC(MAKE_ID) = 0;

UPDATE MAKE_DETAILS SET MAKE_ID = 518
WHERE ISNUMERIC(MAKE_ID) = 0;

ALTER TABLE MAKE_DETAILS
ALTER COLUMN MAKE_ID INT;

-- ANALYZE DATA

-- LET'S CHECK DISTINCT VALUES
SELECT DISTINCT MAKE_NAME
 FROM MAKE_DETAILS;
SELECT * FROM MAKE_DETAILS
WHERE MAKE_NAME = '  Aprilia  ';

SELECT * FROM MAKE_DETAILS;

-- CHECK FOR DUPLICATE VALUES

SELECT *, ROW_NUMBER() OVER(ORDER BY MAKE_ID) AS RANKING
FROM MAKE_DETAILS;

-- UPDATING MISPRINTED VALUES
UPDATE MAKE_DETAILS SET MAKE_ID = 522
WHERE MAKE_ID = '-522';

UPDATE MAKE_DETAILS SET MAKE_NAME = 'Aprilia'
WHERE MAKE_NAME = '  Aprilia  ';

-- AVERAGE AGE OF VEHICLES

SELECT * FROM STOLEN_VEHICLES;

-- PLAN OUT - COLUMN NAEME OF WHICH AFFECTS STOLEN_AGE 
-- MODEL_YEAR

SELECT VEHICLE_TYPE, AVG((YEAR(GETDATE())- MODEL_YEAR )) 
AS AGE_OF_VEHICLES 
FROM STOLEN_VEHICLES
GROUP BY VEHICLE_TYPE;

-- TO FIND TOP 5 OLDEST VEHICLE

SELECT /*TOP 5*/ VEHICLE_TYPE, MODEL_YEAR,
AVG(YEAR(GETDATE())-MODEL_YEAR ) AS AGE_OF_VEHICLE
FROM STOLEN_VEHICLES
GROUP BY VEHICLE_TYPE, MODEL_YEAR
ORDER BY AGE_OF_VEHICLE DESC;

--MIN AVG AGE_OF_VEHICLE IS '7' AND MAXIMUM AVG AGE IS '67'

WITH STOLEN_VEH_AVG_AGE AS 
(
SELECT /*TOP 5*/ VEHICLE_TYPE,
AVG(YEAR(GETDATE())-MODEL_YEAR ) AS AGE_OF_VEHICLE
FROM STOLEN_VEHICLES
GROUP BY VEHICLE_TYPE
)

SELECT MAX(AGE_OF_VEHICLE) FROM STOLEN_VEH_AVG_AGE;


-- STOLEN VEHICLES WEEK TRENDS (WEEKEND/ WEEKDAYS)

SELECT *, DATENAME(WEEKDAY, DATE_STOLEN) AS NAME_OF_DAY 
FROM STOLEN_VEHICLES;

-- LET'S SEE HOW MANY VEHICLES WERE STOLEN ON WEEKENDS AND WEEKDAYS

-- ON WEEKDAYS
SELECT *, DATENAME(WEEKDAY, DATE_STOLEN) AS NAME_OF_DAY 
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY, DATE_STOLEN) NOT IN ('SATURDAY', 'SUNDAY');

-- ON WEEKENDS
SELECT *, DATENAME(WEEKDAY, DATE_STOLEN) AS NAME_OF_DAY 
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY, DATE_STOLEN)  IN ('SATURDAY', 'SUNDAY');

-- TOP 3 VEHICLE COUNT STOLEN ON WEEKDAYS

SELECT TOP 3 VEHICLE_TYPE, COUNT(VEHIVLE_ID)AS 'VEHICLE_COUNT',
DATENAME(WEEKDAY, DATE_STOLEN) AS ' DAY_NAME'
FROM STOLEN_VEHICLES
WHERE DATENAME(WEEKDAY, DATE_STOLEN) NOT IN ('SATURDAY', 'SUNDAY')
GROUP BY VEHICLE_TYPE, DATENAME(WEEKDAY, DATE_STOLEN)
ORDER BY VEHICLE_COUNT DESC;

SELECT * FROM STOLEN_VEHICLES;

-- MONTHLY TREND

SELECT TOP 5 VEHICLE_TYPE, COUNT(VEHIVLE_ID)AS 'VEHICLE_COUNT_MONTH',
DATENAME(MONTH, DATE_STOLEN) AS ' MONTH_NAME'
FROM STOLEN_VEHICLES
WHERE DATENAME(MONTH, DATE_STOLEN) NOT IN ('SATURDAY', 'SUNDAY')
GROUP BY VEHICLE_TYPE, DATENAME(MONTH, DATE_STOLEN)
ORDER BY VEHICLE_COUNT_MONTH DESC;

--RATE OF STOLEN VEHICLE IN EACH REGION
SELECT 
    l.REGION,
    COUNT(s.VEHIVLE_ID) AS TOTAL_STOLEN_VEHICLES,
    COUNT(s.VEHIVLE_ID) * 1.0 / r.AVG_POPULATION AS RATE
FROM 
    LOCATION l
JOIN 
    STOLEN_VEHICLES s ON l.LOCATION_ID = s.LOCATION_ID
JOIN 
    (SELECT REGION, AVG(POPULATION_OF_REGION) AS AVG_POPULATION 
     FROM LOCATION 
     GROUP BY REGION) r ON l.REGION = r.REGION
GROUP BY 
    l.REGION, r.AVG_POPULATION
ORDER BY
TOTAL_STOLEN_VEHICLES DESC;

-- TO FIND OUT SIMILAR PATTERN OR PROFILE STOLEN VEHICLES AS PER REGION
SELECT * FROM STOLEN_VEHICLES;
WITH STOLEN_VEH_PROFILE AS (
    SELECT
        SV.VEHIVLE_ID,
        VEHICLE_TYPE,
        MODEL_YEAR,
        VEH_DESC,
        COLOR,
        DATE_STOLEN,
        L.LOCATION_ID,
        L.REGION,
        L.POPULATION_OF_REGION,
        L.DENSITY,
        M.MAKE_ID,
        M.MAKE_NAME,
        M.MAKE_TYPE
    FROM
        STOLEN_VEHICLES SV
    JOIN
        LOCATION L ON SV.LOCATION_ID = L.LOCATION_ID
    JOIN
        MAKE_DETAILS M ON SV.MAKE_ID = M.MAKE_ID
)

SELECT
    REGION,
    COUNT(VEHIVLE_ID) AS STL_VRH_COUNT,
    COUNT(DISTINCT MAKE_NAME) AS MAKERS,
    COUNT(DISTINCT COLOR) AS DIS_COLOR,
    COUNT(DISTINCT MODEL_YEAR) AS UN_MODEL_YEAR,
    AVG(CAST(POPULATION_OF_REGION AS FLOAT)) AS SCALED_POPULATION,
    AVG(CAST(DENSITY AS FLOAT)) AS SCALED_DENSITY
FROM
    STOLEN_VEH_PROFILE
GROUP BY
    REGION
ORDER BY
    REGION DESC;


-- TOP 3 AND BOTTOM 3 STOLEN VEHICLES

WITH RANKED_VEHICLES AS (
    SELECT 
        DATENAME(WEEKDAY, DATE_STOLEN) AS 'DAY_NAME',
        COUNT(VEHIVLE_ID) AS 'VEH_COUNT',
        ROW_NUMBER() OVER (ORDER BY COUNT(VEHIVLE_ID) DESC) AS 'TOPRANK',
        ROW_NUMBER() OVER (ORDER BY COUNT(VEHIVLE_ID)) AS 'BOTTOMRANK'
    FROM 
        STOLEN_VEHICLES
    WHERE 
        DATE_STOLEN IS NOT NULL /* Excluding any null values */
    GROUP BY 
        DATENAME(WEEKDAY, DATE_STOLEN)
)
SELECT 
    DAY_NAME,
    VEH_COUNT, 
    CASE 
        WHEN TOPRANK <= 3 THEN 'TOP' + CAST(TOPRANK AS VARCHAR(5))
        WHEN BOTTOMRANK <= 3 THEN 'BOTTOM' + CAST(BOTTOMRANK AS VARCHAR(5))
        ELSE 'NA' 
    END AS RANKING
FROM 
    RANKED_VEHICLES
ORDER BY 
    CASE 
        WHEN TOPRANK <= 3 THEN TOPRANK 
        WHEN BOTTOMRANK <= 3 THEN 1000 + BOTTOMRANK 
        ELSE 500 
    END;
